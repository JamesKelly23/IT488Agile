@{
    DateTime dateCursor = ViewBag.TargetDate;
    DateTime currentMonday = DateTime.Today; //Start from today's date
    while (dateCursor.DayOfWeek != DayOfWeek.Monday) //Backtrack to the previous Monday
    {
        dateCursor = dateCursor.AddDays(-1);
    }
    while (currentMonday.DayOfWeek != DayOfWeek.Monday)
    {
        currentMonday = currentMonday.AddDays(-1);
    }
    int mod = ((dateCursor - DateTime.Today).Days) / 7; //Calculate the number of weeks are between the current week and the week of the TargetDate. Use this information to supply the Week View Link with the appropriate week modifier
}
<a class="link-button-nofloat" asp-action="Index" asp-route-modifier="@mod">Back to Week View</a>
<center>
    <h1>@ViewBag.TargetDate.ToString("D")</h1>
    <hr />
    <p>
        <table style="border: 2pt solid black; box-shadow: 3px 3px 3px #888888;">
            <tr style="padding:30px;">
                @{
                    //we don't want the GM to edit the schedule of a day that has passsed
                    if (!(ViewBag.TargetDate.AddDays(-1) < DateTime.Today))
                    {
                        <td style="width: 150px; padding:10px;">
                            <a class="link-button-nofloat" asp-action="Painter" asp-route-id="" asp-route-date="@ViewBag.TargetDate.AddDays(-1).ToString("d")">
                                Previous Day
                            </a>
                        </td>
                    }
                }
                <td class="largeroptions" style="padding:10px;">Choose your options, then click a start time to start painting a shift onto the day. Finally, click the desired end time to add the shift.</td>
                <td style="width: 150px; padding:10px;"><a class="link-button-nofloat" asp-action="Painter" asp-route-id="" asp-route-date="@ViewBag.TargetDate.AddDays(1).ToString("d")">Next Day</a></td>
            </tr>
        </table>
    </p>

    <form asp-action="@((ViewBag.EmployeeID ?? 0) == 0 ? "Painter" : "CreateShift")">
        <p style="width: 80%; padding:5px; border: 2pt solid black; box-shadow: 3px 3px 3px #888888;">
            @{
                if (ViewBag.EmployeeID != 0)
                {
                    <a asp-action="Painter" asp-route-id="" asp-route-date="@ViewBag.TargetDate.ToString("d")" class="link-button-nofloat deny">Cancel</a>
                }
            }
            <span class="text-nowrap largeroptions" style="margin:10px;">
                Role:
                <select onchange="ChangeValue('RoleText','')" name="RoleSelector">
                    <option value=""></option><!--Give the user the option to choose no value-->
                    @{
                        foreach (Role theRole in Role.GetList())
                        {
                            if (ViewBag.SelectedRole == theRole.Name) //If a role has been selected previously, automatically select that role again
                            {
                                <option selected value="@theRole.Name">@theRole.Name</option>
                            }
                            else
                            {
                                <option value="@theRole.Name">@theRole.Name</option>
                            }
                        }
                    }
                </select>
            </span>
            <span class="text-nowrap largeroptions" style="margin:10px;">
                Custom Role (optional):
                <input type="text" id="RoleText" name="RoleTextBox" value="@(ViewBag.RoleText)" />
            </span>
            <span class="text-nowrap largeroptions" style="margin:10px;">
                Notes (optional):
                <input type="text" name="NotesTextBox" value="@ViewBag.NotesText" />
            </span>
            <!--These hidden form elements hold the shift information that is determined by which submit button is pressed-->
            <input type="hidden" name="EmployeeID" value="@(ViewBag.EmployeeID ?? 0)" />
            <input type="hidden" name="TargetDate" value="@(ViewBag.TargetDate ?? new DateTime().ToString("d"))" />
            <input type="hidden" id="StartTime" name="StartTime" value="@(ViewBag.StartTime ?? new DateTime().ToString("g"))" />
            <input type="hidden" id="EndTime" name="EndTime" value="" />
        </p>
        <table style="border: 4pt solid black; box-shadow:3px 3px 3px #888888;">
            <tr class="painter-headerrow">
                <td class="painter-name-cell">Employee</td>
                @{
                    DateTime theCursor = ViewBag.TargetDate.AddHours(6);
                    for (int i = 6; i < 24; i++)
                    {
                        <td class="painter-cell-left">@(i > 12 ? i - 12 : i)</td>
                        <td class="painter-cell-right">@theCursor.ToString("tt")</td>
                        theCursor = theCursor.AddHours(1);
                    }
                }
            </tr>
            @{
                List<Shift> theList = ViewBag.ShiftList; //Obtain the list<Shift> from the controller
                int rownum = 0;
                foreach (Employee theEmployee in ViewBag.EmployeeList)
                {
                    Availability theAvailability = theEmployee.GetCurrentAvailability();
                    IEnumerable<Shift> theQuery = from Shift theShift in theList
                                                  where theShift.EmployeeID == theEmployee.ID
                                                  select theShift;
                    //Filter to the shifts that are for the current Employee record.
                    List<Shift> theShifts = theQuery.ToList();
                    //Start rendering the row for the employee
                    <tr class="painter-row @(rownum++%2==0?"evenrow":"")">
                        <td class="painter-name-cell">@theEmployee.FullName()</td>
                        <td style="background-color:darkgray;" class="painter-cell"></td>
                        @{
                            if (TimeOffRequest.IsDayApprovedOffForEmployee(theEmployee.ID, ViewBag.TargetDate)) //Fires if there is an approved time off request for an employee on this day.
                            {
                                <td colspan="36" class="painter-cell @(rownum %2 == 0 ? "painter-unavailable-even" : "painter-unavailable")">Unavailable - Approved Time Off Request</td>
                            }
                            else if (theShifts.Count > 0) //Fires if a shift exists on the current row.
                            {
                                Shift theShift = theShifts.ElementAt(0);

                                int startHour = (theShift.StartTime - ViewBag.TargetDate).Hours;
                                int shiftLength = (theShift.EndTime - theShift.StartTime).Hours;
                                for (int i = 6; i < 24; i++)
                                {
                                    if ((i < startHour) || (i > (startHour + shiftLength - 1))) //Adds empty cell
                                    {
                                        <td colspan="2" class="@((theAvailability.IsAvailableAt(ViewBag.TargetDate.DayOfWeek, i) ? "painter-cell": (rownum%2==0?"painter-unavailable-even":"painter-unavailable")))"></td>
                                    }
                                    else //Adds a cell to graphically represent the shift. The cell spans the entire length of the shift. Also render an "x" button to allow the shift to be deleted with one click.
                                    {
                                        <td style="vertical-align:middle;" class="painter-shift painter-cell" colspan="@(shiftLength*2)">@theShift.ToString() - @theShift.Role<a class="painter-link-button-small-x" asp-action="DeleteShift" asp-route-id="@theShift.ID">x</a></td>
                                        i += shiftLength - 1;
                                    }
                                }
                            }
                            else
                            {
                                for (int i = 6; i < 24; i++)
                                {
                                    DateTime targetTime = ViewBag.TargetDate.AddHours(i);
                                    if (((@ViewBag.EmployeeID ?? 0) == 0) && i < 23) //StartTime Buttons (Only show when starttime has not already been declared)
                                    {
                                        <td colspan="2" class="@((theAvailability.IsAvailableAt(ViewBag.TargetDate.DayOfWeek, i) ? "painter-cell": (rownum%2==0?"painter-unavailable-even":"painter-unavailable")))"><input type="submit" asp-route-date="@ViewBag.TargetDate.ToString("d")" name="Submit" asp-route-id="@theEmployee.ID" onmousedown="ChangeValue('StartTime', '@targetTime.ToString()')" value="@targetTime.ToString("htt")" class="painter-link-button-nofloat" asp-action="Painter"></td>
                                    }
                                    else if ((ViewBag.EmployeeID == theEmployee.ID))
                                    {
                                        if ((ViewBag.StartTime - ViewBag.TargetDate).Hours == i)//Start Button (shows when starttme has been declared and this hour is the same as the start time)
                                        {
                                            <td colspan="2"><input type="submit" id="focusButton" class="painter-link-button-nofloat painter-shift" value="Start" disabled></td>
                                        }
                                        else if (i < (ViewBag.StartTime - ViewBag.TargetDate).Hours) //Show nothing (for the hours before the declared starttime)
                                        {
                                            <td colspan="2" class="@((theAvailability.IsAvailableAt(ViewBag.TargetDate.DayOfWeek, i) ? "painter-cell": (rownum%2==0?"painter-unavailable-even":"painter-unavailable")))"></td>
                                        }
                                        else //Show the EndTime buttons.
                                        {
                                            if (i < 23)
                                            {
                                                <td colspan="2" class="@((theAvailability.IsAvailableAt(ViewBag.TargetDate.DayOfWeek, i) ? "painter-cell": (rownum%2==0?"painter-unavailable-even":"painter-unavailable")))"><input type="submit" name="Submit" onmousedown="ChangeValue('EndTime', '@targetTime.AddHours(1).ToString()')" value="@ViewBag.TargetDate.AddHours(i+1).ToString("htt")" class="painter-link-button-nofloat" asp-action="AddShift"></td>
                                            }
                                        }
                                    }
                                    else //No shifts exist on this day, and the painter is not in the middle of creating a shift, so show all of the start buttons for this row.
                                    {
                                        <td colspan="2" class="@((theAvailability.IsAvailableAt(ViewBag.TargetDate.DayOfWeek, i) ? "painter-cell": (rownum%2==0?"painter-unavailable-even":"painter-unavailable")))"></td>
                                    }
                                }
                            }
                        }
                    </tr>
                    /*End the Employee Row*/
                }
            }
        </table>
    </form>
</center>
<script>
    /*
     * Each submit button's onmousedown event is attached to the ChangeValue function that changes the values of the hidden form elements' values to whatever
     * time was clicked. The ScrollToFocusButton() function is used to scroll to the selected row automatically when a shift is started. This way, the user
     * does not have to scroll down the page to finish painting the shift onto the day.
     */
    function ChangeValue(id, val) {
        document.getElementById(id).setAttribute("Value", val);
    }
    document.onload = ScrollToFocusButton()
    function ScrollToFocusButton() {
        var element = document.getElementById("focusButton");
        element.scrollIntoView(true);
    }
</script>